// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils/lib/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_utils_2flib_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_utils_2flib_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_utils_2flib_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_utils_2flib_2fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_utils_2flib_2fmessage_2eproto;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class CommandMessage;
struct CommandMessageDefaultTypeInternal;
extern CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
class PacketMessage;
struct PacketMessageDefaultTypeInternal;
extern PacketMessageDefaultTypeInternal _PacketMessage_default_instance_;
class SetUserIdMessage;
struct SetUserIdMessageDefaultTypeInternal;
extern SetUserIdMessageDefaultTypeInternal _SetUserIdMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatMessage* Arena::CreateMaybeMessage<::ChatMessage>(Arena*);
template<> ::CommandMessage* Arena::CreateMaybeMessage<::CommandMessage>(Arena*);
template<> ::PacketMessage* Arena::CreateMaybeMessage<::PacketMessage>(Arena*);
template<> ::SetUserIdMessage* Arena::CreateMaybeMessage<::SetUserIdMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CommandMessage_CommandType : int {
  CommandMessage_CommandType_SET_USER_ID = 0,
  CommandMessage_CommandType_CommandMessage_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommandMessage_CommandType_CommandMessage_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommandMessage_CommandType_IsValid(int value);
constexpr CommandMessage_CommandType CommandMessage_CommandType_CommandType_MIN = CommandMessage_CommandType_SET_USER_ID;
constexpr CommandMessage_CommandType CommandMessage_CommandType_CommandType_MAX = CommandMessage_CommandType_SET_USER_ID;
constexpr int CommandMessage_CommandType_CommandType_ARRAYSIZE = CommandMessage_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandMessage_CommandType_descriptor();
template<typename T>
inline const std::string& CommandMessage_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandMessage_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandMessage_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandMessage_CommandType_descriptor(), enum_t_value);
}
inline bool CommandMessage_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandMessage_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandMessage_CommandType>(
    CommandMessage_CommandType_descriptor(), name, value);
}
// ===================================================================

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2flib_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class SetUserIdMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetUserIdMessage) */ {
 public:
  inline SetUserIdMessage() : SetUserIdMessage(nullptr) {}
  ~SetUserIdMessage() override;
  explicit PROTOBUF_CONSTEXPR SetUserIdMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserIdMessage(const SetUserIdMessage& from);
  SetUserIdMessage(SetUserIdMessage&& from) noexcept
    : SetUserIdMessage() {
    *this = ::std::move(from);
  }

  inline SetUserIdMessage& operator=(const SetUserIdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserIdMessage& operator=(SetUserIdMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserIdMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserIdMessage* internal_default_instance() {
    return reinterpret_cast<const SetUserIdMessage*>(
               &_SetUserIdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetUserIdMessage& a, SetUserIdMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserIdMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserIdMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUserIdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUserIdMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUserIdMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetUserIdMessage& from) {
    SetUserIdMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserIdMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetUserIdMessage";
  }
  protected:
  explicit SetUserIdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SetUserIdMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2flib_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class CommandMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandMessage) */ {
 public:
  inline CommandMessage() : CommandMessage(nullptr) {}
  ~CommandMessage() override;
  explicit PROTOBUF_CONSTEXPR CommandMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMessage(const CommandMessage& from);
  CommandMessage(CommandMessage&& from) noexcept
    : CommandMessage() {
    *this = ::std::move(from);
  }

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMessage& operator=(CommandMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMessage& default_instance() {
    return *internal_default_instance();
  }
  enum ParamsCase {
    kSetUserId = 2,
    PARAMS_NOT_SET = 0,
  };

  static inline const CommandMessage* internal_default_instance() {
    return reinterpret_cast<const CommandMessage*>(
               &_CommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandMessage& a, CommandMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMessage& from) {
    CommandMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandMessage";
  }
  protected:
  explicit CommandMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandMessage_CommandType CommandType;
  static constexpr CommandType SET_USER_ID =
    CommandMessage_CommandType_SET_USER_ID;
  static inline bool CommandType_IsValid(int value) {
    return CommandMessage_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    CommandMessage_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    CommandMessage_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    CommandMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return CommandMessage_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return CommandMessage_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return CommandMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kSetUserIdFieldNumber = 2,
  };
  // .CommandMessage.CommandType command = 1;
  void clear_command();
  ::CommandMessage_CommandType command() const;
  void set_command(::CommandMessage_CommandType value);
  private:
  ::CommandMessage_CommandType _internal_command() const;
  void _internal_set_command(::CommandMessage_CommandType value);
  public:

  // .SetUserIdMessage setUserId = 2;
  bool has_setuserid() const;
  private:
  bool _internal_has_setuserid() const;
  public:
  void clear_setuserid();
  const ::SetUserIdMessage& setuserid() const;
  PROTOBUF_NODISCARD ::SetUserIdMessage* release_setuserid();
  ::SetUserIdMessage* mutable_setuserid();
  void set_allocated_setuserid(::SetUserIdMessage* setuserid);
  private:
  const ::SetUserIdMessage& _internal_setuserid() const;
  ::SetUserIdMessage* _internal_mutable_setuserid();
  public:
  void unsafe_arena_set_allocated_setuserid(
      ::SetUserIdMessage* setuserid);
  ::SetUserIdMessage* unsafe_arena_release_setuserid();

  void clear_params();
  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:CommandMessage)
 private:
  class _Internal;
  void set_has_setuserid();

  inline bool has_params() const;
  inline void clear_has_params();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    union ParamsUnion {
      constexpr ParamsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::SetUserIdMessage* setuserid_;
    } params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2flib_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class PacketMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketMessage) */ {
 public:
  inline PacketMessage() : PacketMessage(nullptr) {}
  ~PacketMessage() override;
  explicit PROTOBUF_CONSTEXPR PacketMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketMessage(const PacketMessage& from);
  PacketMessage(PacketMessage&& from) noexcept
    : PacketMessage() {
    *this = ::std::move(from);
  }

  inline PacketMessage& operator=(const PacketMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketMessage& operator=(PacketMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kNormalMsg = 1,
    kCommandMsg = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const PacketMessage* internal_default_instance() {
    return reinterpret_cast<const PacketMessage*>(
               &_PacketMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PacketMessage& a, PacketMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PacketMessage& from) {
    PacketMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketMessage";
  }
  protected:
  explicit PacketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalMsgFieldNumber = 1,
    kCommandMsgFieldNumber = 2,
  };
  // .ChatMessage normal_msg = 1;
  bool has_normal_msg() const;
  private:
  bool _internal_has_normal_msg() const;
  public:
  void clear_normal_msg();
  const ::ChatMessage& normal_msg() const;
  PROTOBUF_NODISCARD ::ChatMessage* release_normal_msg();
  ::ChatMessage* mutable_normal_msg();
  void set_allocated_normal_msg(::ChatMessage* normal_msg);
  private:
  const ::ChatMessage& _internal_normal_msg() const;
  ::ChatMessage* _internal_mutable_normal_msg();
  public:
  void unsafe_arena_set_allocated_normal_msg(
      ::ChatMessage* normal_msg);
  ::ChatMessage* unsafe_arena_release_normal_msg();

  // .CommandMessage command_msg = 2;
  bool has_command_msg() const;
  private:
  bool _internal_has_command_msg() const;
  public:
  void clear_command_msg();
  const ::CommandMessage& command_msg() const;
  PROTOBUF_NODISCARD ::CommandMessage* release_command_msg();
  ::CommandMessage* mutable_command_msg();
  void set_allocated_command_msg(::CommandMessage* command_msg);
  private:
  const ::CommandMessage& _internal_command_msg() const;
  ::CommandMessage* _internal_mutable_command_msg();
  public:
  void unsafe_arena_set_allocated_command_msg(
      ::CommandMessage* command_msg);
  ::CommandMessage* unsafe_arena_release_command_msg();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:PacketMessage)
 private:
  class _Internal;
  void set_has_normal_msg();
  void set_has_command_msg();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::ChatMessage* normal_msg_;
      ::CommandMessage* command_msg_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2flib_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// int32 user_id = 1;
inline void ChatMessage::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t ChatMessage::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t ChatMessage::user_id() const {
  // @@protoc_insertion_point(field_get:ChatMessage.user_id)
  return _internal_user_id();
}
inline void ChatMessage::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void ChatMessage::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ChatMessage.user_id)
}

// string content = 2;
inline void ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.content)
}

// -------------------------------------------------------------------

// SetUserIdMessage

// int32 user_id = 1;
inline void SetUserIdMessage::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t SetUserIdMessage::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t SetUserIdMessage::user_id() const {
  // @@protoc_insertion_point(field_get:SetUserIdMessage.user_id)
  return _internal_user_id();
}
inline void SetUserIdMessage::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void SetUserIdMessage::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:SetUserIdMessage.user_id)
}

// string content = 2;
inline void SetUserIdMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SetUserIdMessage::content() const {
  // @@protoc_insertion_point(field_get:SetUserIdMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserIdMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SetUserIdMessage.content)
}
inline std::string* SetUserIdMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:SetUserIdMessage.content)
  return _s;
}
inline const std::string& SetUserIdMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void SetUserIdMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* SetUserIdMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* SetUserIdMessage::release_content() {
  // @@protoc_insertion_point(field_release:SetUserIdMessage.content)
  return _impl_.content_.Release();
}
inline void SetUserIdMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SetUserIdMessage.content)
}

// -------------------------------------------------------------------

// CommandMessage

// .CommandMessage.CommandType command = 1;
inline void CommandMessage::clear_command() {
  _impl_.command_ = 0;
}
inline ::CommandMessage_CommandType CommandMessage::_internal_command() const {
  return static_cast< ::CommandMessage_CommandType >(_impl_.command_);
}
inline ::CommandMessage_CommandType CommandMessage::command() const {
  // @@protoc_insertion_point(field_get:CommandMessage.command)
  return _internal_command();
}
inline void CommandMessage::_internal_set_command(::CommandMessage_CommandType value) {
  
  _impl_.command_ = value;
}
inline void CommandMessage::set_command(::CommandMessage_CommandType value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:CommandMessage.command)
}

// .SetUserIdMessage setUserId = 2;
inline bool CommandMessage::_internal_has_setuserid() const {
  return params_case() == kSetUserId;
}
inline bool CommandMessage::has_setuserid() const {
  return _internal_has_setuserid();
}
inline void CommandMessage::set_has_setuserid() {
  _impl_._oneof_case_[0] = kSetUserId;
}
inline void CommandMessage::clear_setuserid() {
  if (_internal_has_setuserid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.params_.setuserid_;
    }
    clear_has_params();
  }
}
inline ::SetUserIdMessage* CommandMessage::release_setuserid() {
  // @@protoc_insertion_point(field_release:CommandMessage.setUserId)
  if (_internal_has_setuserid()) {
    clear_has_params();
    ::SetUserIdMessage* temp = _impl_.params_.setuserid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.params_.setuserid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SetUserIdMessage& CommandMessage::_internal_setuserid() const {
  return _internal_has_setuserid()
      ? *_impl_.params_.setuserid_
      : reinterpret_cast< ::SetUserIdMessage&>(::_SetUserIdMessage_default_instance_);
}
inline const ::SetUserIdMessage& CommandMessage::setuserid() const {
  // @@protoc_insertion_point(field_get:CommandMessage.setUserId)
  return _internal_setuserid();
}
inline ::SetUserIdMessage* CommandMessage::unsafe_arena_release_setuserid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandMessage.setUserId)
  if (_internal_has_setuserid()) {
    clear_has_params();
    ::SetUserIdMessage* temp = _impl_.params_.setuserid_;
    _impl_.params_.setuserid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandMessage::unsafe_arena_set_allocated_setuserid(::SetUserIdMessage* setuserid) {
  clear_params();
  if (setuserid) {
    set_has_setuserid();
    _impl_.params_.setuserid_ = setuserid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandMessage.setUserId)
}
inline ::SetUserIdMessage* CommandMessage::_internal_mutable_setuserid() {
  if (!_internal_has_setuserid()) {
    clear_params();
    set_has_setuserid();
    _impl_.params_.setuserid_ = CreateMaybeMessage< ::SetUserIdMessage >(GetArenaForAllocation());
  }
  return _impl_.params_.setuserid_;
}
inline ::SetUserIdMessage* CommandMessage::mutable_setuserid() {
  ::SetUserIdMessage* _msg = _internal_mutable_setuserid();
  // @@protoc_insertion_point(field_mutable:CommandMessage.setUserId)
  return _msg;
}

inline bool CommandMessage::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void CommandMessage::clear_has_params() {
  _impl_._oneof_case_[0] = PARAMS_NOT_SET;
}
inline CommandMessage::ParamsCase CommandMessage::params_case() const {
  return CommandMessage::ParamsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PacketMessage

// .ChatMessage normal_msg = 1;
inline bool PacketMessage::_internal_has_normal_msg() const {
  return payload_case() == kNormalMsg;
}
inline bool PacketMessage::has_normal_msg() const {
  return _internal_has_normal_msg();
}
inline void PacketMessage::set_has_normal_msg() {
  _impl_._oneof_case_[0] = kNormalMsg;
}
inline void PacketMessage::clear_normal_msg() {
  if (_internal_has_normal_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.normal_msg_;
    }
    clear_has_payload();
  }
}
inline ::ChatMessage* PacketMessage::release_normal_msg() {
  // @@protoc_insertion_point(field_release:PacketMessage.normal_msg)
  if (_internal_has_normal_msg()) {
    clear_has_payload();
    ::ChatMessage* temp = _impl_.payload_.normal_msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.normal_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatMessage& PacketMessage::_internal_normal_msg() const {
  return _internal_has_normal_msg()
      ? *_impl_.payload_.normal_msg_
      : reinterpret_cast< ::ChatMessage&>(::_ChatMessage_default_instance_);
}
inline const ::ChatMessage& PacketMessage::normal_msg() const {
  // @@protoc_insertion_point(field_get:PacketMessage.normal_msg)
  return _internal_normal_msg();
}
inline ::ChatMessage* PacketMessage::unsafe_arena_release_normal_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketMessage.normal_msg)
  if (_internal_has_normal_msg()) {
    clear_has_payload();
    ::ChatMessage* temp = _impl_.payload_.normal_msg_;
    _impl_.payload_.normal_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketMessage::unsafe_arena_set_allocated_normal_msg(::ChatMessage* normal_msg) {
  clear_payload();
  if (normal_msg) {
    set_has_normal_msg();
    _impl_.payload_.normal_msg_ = normal_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketMessage.normal_msg)
}
inline ::ChatMessage* PacketMessage::_internal_mutable_normal_msg() {
  if (!_internal_has_normal_msg()) {
    clear_payload();
    set_has_normal_msg();
    _impl_.payload_.normal_msg_ = CreateMaybeMessage< ::ChatMessage >(GetArenaForAllocation());
  }
  return _impl_.payload_.normal_msg_;
}
inline ::ChatMessage* PacketMessage::mutable_normal_msg() {
  ::ChatMessage* _msg = _internal_mutable_normal_msg();
  // @@protoc_insertion_point(field_mutable:PacketMessage.normal_msg)
  return _msg;
}

// .CommandMessage command_msg = 2;
inline bool PacketMessage::_internal_has_command_msg() const {
  return payload_case() == kCommandMsg;
}
inline bool PacketMessage::has_command_msg() const {
  return _internal_has_command_msg();
}
inline void PacketMessage::set_has_command_msg() {
  _impl_._oneof_case_[0] = kCommandMsg;
}
inline void PacketMessage::clear_command_msg() {
  if (_internal_has_command_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.command_msg_;
    }
    clear_has_payload();
  }
}
inline ::CommandMessage* PacketMessage::release_command_msg() {
  // @@protoc_insertion_point(field_release:PacketMessage.command_msg)
  if (_internal_has_command_msg()) {
    clear_has_payload();
    ::CommandMessage* temp = _impl_.payload_.command_msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.command_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CommandMessage& PacketMessage::_internal_command_msg() const {
  return _internal_has_command_msg()
      ? *_impl_.payload_.command_msg_
      : reinterpret_cast< ::CommandMessage&>(::_CommandMessage_default_instance_);
}
inline const ::CommandMessage& PacketMessage::command_msg() const {
  // @@protoc_insertion_point(field_get:PacketMessage.command_msg)
  return _internal_command_msg();
}
inline ::CommandMessage* PacketMessage::unsafe_arena_release_command_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketMessage.command_msg)
  if (_internal_has_command_msg()) {
    clear_has_payload();
    ::CommandMessage* temp = _impl_.payload_.command_msg_;
    _impl_.payload_.command_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketMessage::unsafe_arena_set_allocated_command_msg(::CommandMessage* command_msg) {
  clear_payload();
  if (command_msg) {
    set_has_command_msg();
    _impl_.payload_.command_msg_ = command_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketMessage.command_msg)
}
inline ::CommandMessage* PacketMessage::_internal_mutable_command_msg() {
  if (!_internal_has_command_msg()) {
    clear_payload();
    set_has_command_msg();
    _impl_.payload_.command_msg_ = CreateMaybeMessage< ::CommandMessage >(GetArenaForAllocation());
  }
  return _impl_.payload_.command_msg_;
}
inline ::CommandMessage* PacketMessage::mutable_command_msg() {
  ::CommandMessage* _msg = _internal_mutable_command_msg();
  // @@protoc_insertion_point(field_mutable:PacketMessage.command_msg)
  return _msg;
}

inline bool PacketMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void PacketMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline PacketMessage::PayloadCase PacketMessage::payload_case() const {
  return PacketMessage::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CommandMessage_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommandMessage_CommandType>() {
  return ::CommandMessage_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_utils_2flib_2fmessage_2eproto
